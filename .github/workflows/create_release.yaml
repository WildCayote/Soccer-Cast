name: create_release
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build_release:
    runs-on: [windows-latest]
    steps:
      - uses: actions/checkout@v3
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: install requirements
        run: |
          python -m pip install --upgrade pip
          pip install dvc[all]  # Ensure all DVC dependencies are installed
          pip install --upgrade cryptography  # Update cryptography library
          pip install -r requirements.txt
      - name: Set up Google Drive credentials
        run: |
          mkdir -p /home/runner/.config/dvc
          echo '${{ secrets.GDRIVE_SERVICE_ACCOUNT_JSON }}' > /home/runner/.config/dvc/gdrive-credentials.json
        env:
          GDRIVE_SERVICE_ACCOUNT_JSON: ${{ secrets.GDRIVE_SERVICE_ACCOUNT_JSON }}
      - name: modify dvc to use drive service account
        run: |
          dvc remote modify drive gdrive_use_service_account true
      - name: add the service account json file to the dvc remote config
        run: |
          dvc remote modify drive gdrive_service_account_json_file_path /home/runner/.config/dvc/gdrive-credentials.json
      - name: pull data/models from remote dvc store
        run: |
          # $retries = 4
          # $attempts = 0

          # while($attempts -lt retries){
          #   dvc pull -v

          #   $attempts++
          # }
      - name: Create the package to be uploaded by running the Python code
        run: |
          python src/release/create_release.py --test true
      - name: Create the release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ vars.REPO_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: "Automated release based on ${{ github.ref }}"
      - name: Upload the package to the GitHub artifact store for that release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ vars.REPO_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src/release/ml_package.zip
          asset_name: ml_package-v${{ github.run_number }}.zip
          asset_content_type: application/zip
